title: "Benchmarking project for calamanCy"
description: |
  This is a spaCy project that benchmarks calamanCy on a variety of tasks.
  You can use this project to reproduce the experiments in the write-up. First, 
  you need to install the required dependencies:

  ```
  pip install -r requirements.txt
  ```

  Then run the set-up commands:

  ```
  python -m spacy project assets
  python -m spacy project run setup
  ```

  This step downloads all the necessary datasets and models for benchmarking
  use. You can then run one of the [workflows](#-) below. They are organized by
  task and a dataset identifier.

directories:
  - "assets"
  - "assets/treebank/"
  - "configs"
  - "corpus"
  - "training"
  - "metrics"

vars:
  seed: 0
  gpu_id: 0
  lang: "tl"
  remote_gcs_bucket: "ljvmiranda"

remotes:
  gcs: "gs://${vars.remote_gcs_bucket}/calamanCy/benchmark_cache/"

assets:
  - dest: "assets/treebank/UD_Tagalog-Ugnayan/"
    description: "Treebank data for UD_Tagalog-Ugnayan. Originally sourced from *Parsing in the absence of related languages: Evaluating low-resource dependency parsers in Tagalog* by Aquino and de Leon (2020)."
    git:
      repo: "https://github.com/UniversalDependencies/UD_Tagalog-Ugnayan"
      branch: "master"
      path: ""
  - dest: "assets/treebank/UD_Tagalog-TRG/"
    description: "Treebank data for UD_Tagalog-TRG. Originally sourced from the thesis, *A treebank prototype for Tagalog*, at the University of TÃ¼bingen by Samson (2018)."
    git:
      repo: "https://github.com/UniversalDependencies/UD_Tagalog-TRG"
      branch: "master"
      path: ""
  - dest: "assets/hatespeech.zip"
    description: "Contains 10k tweets with 4.2k testing and validation data labeled as hate speech or non-hate speech (text categorization). Based on *Monitoring dengue using Twitter and deep learning techniques* by Livelo and Cheng (2018)."
    url: "https://s3.us-east-2.amazonaws.com/blaisecruz.com/datasets/hatenonhate/hatespeech_raw.zip"
  - dest: "assets/dengue.zip"
    description: "Contains tweets on dengue labeled with five different categories. Tweets can be categorized to multiple categories at the same time (multilabel text categorization). Based on *Hate speech in Philippine election-related tweets: Automatic detection and classification using natural language processing* by Cabasag et al. (2019)"
    url: "https://s3.us-east-2.amazonaws.com/blaisecruz.com/datasets/dengue/dengue_raw.zip"
  - dest: assets/calamancy_gold.tar.gz
    description: "Contains the annotated TLUnified corpora in spaCy format with PER, ORG, LOC as entity labels (named entity recognition). Annotated by three annotators with IAA (Cohen's Kappa) of 0.78. Corpora was based from *Improving Large-scale Language Models and Resources for Filipino* by Cruz and Cheng (2021)."
    url: "https://storage.googleapis.com/ljvmiranda/calamanCy/tl_tlunified_gold/v1.0/corpus.tar.gz"

workflows:
  setup:
    - "install-models"
    - "process-datasets"
  textcat-hatespeech:
    - "pretrain-hatespeech"
    - "train-hatespeech"
    - "train-hatespeech-trf"
    - "evaluate-hatespeech"
  textcat_multilabel-dengue:
    - "pretrain-dengue"
    - "train-dengue"
    - "train-dengue-trf"
    - "evaluate-dengue"
  ner-calamancy_gold:
    # No training here because the training data is already
    # part of the original pipeline.
    - "evaluate-calamancy"
  parser-ud:
    # Using 10-fold cross-validation as recommended by the UD framework
    - "evaluate-ud"

commands:
  - name: "install-models"
    help: "Install models in the spaCy workspace"
    script:
      - pip install https://huggingface.co/ljvmiranda921/tl_calamancy_md/resolve/main/tl_calamancy_md-any-py3-none-any.whl
      - pip install https://huggingface.co/ljvmiranda921/tl_calamancy_lg/resolve/main/tl_calamancy_lg-any-py3-none-any.whl
      - pip install https://huggingface.co/ljvmiranda921/tl_calamancy_trf/resolve/main/tl_calamancy_trf-any-py3-none-any.whl

  - name: "process-datasets"
    help: "Process the datasets and convert them into spaCy format"
    script:
      # textcat: extract and process Hatespeech dataset
      - unzip -o assets/hatespeech.zip -d assets/
      - mv assets/hatespeech/valid.csv assets/hatespeech/dev.csv
      - python -m scripts.process_hatespeech assets/hatespeech/ corpus/textcat-hatespeech/ --include-pretraining
      # textcat_multilabel: extract and process Dengue dataset
      - unzip -o assets/dengue.zip -d assets/
      - mv assets/dengue/valid.csv assets/dengue/dev.csv
      - python -m scripts.process_dengue assets/dengue/ corpus/textcat_multilabel-dengue/ --include-pretraining
      # ner: extract calamancy-gold dataset.
      - mkdir -p corpus/ner-calamancy_gold/
      - tar -xzvf assets/calamancy_gold.tar.gz -C corpus/ner-calamancy_gold/
      # parser: convert treebank into spaCy format and then merge them
      - mkdir -p corpus/treebank/
      - python -m spacy convert assets/treebank/UD_Tagalog-Ugnayan/tl_ugnayan-ud-test.conllu assets/treebank --converter conllu --n-sents 1 --merge-subtokens
      - python -m spacy convert assets/treebank/UD_Tagalog-TRG/tl_trg-ud-test.conllu assets/treebank --converter conllu --n-sents 1 --merge-subtokens
      - python -m scripts.merge_treebanks assets/treebank/tl_trg-ud-test.spacy assets/treebank/tl_ugnayan-ud-test.spacy assets/treebank/ud_merged.spacy --seed ${vars.seed}
      - python -m scripts.split_treebank assets/treebank/ud_merged.spacy corpus/treebank --lang ${vars.lang} --train-size 0.9 --seed ${vars.seed}
    deps:
      - assets/hatespeech.zip
      - assets/dengue.zip
      - assets/calamancy_gold.tar.gz
      - assets/treebank/UD_Tagalog-Ugnayan/tl_ugnayan-ud-test.conllu
      - assets/treebank/UD_Tagalog-TRG/tl_trg-ud-test.conllu
    outputs:
      - corpus/textcat-hatespeech/train.spacy
      - corpus/textcat-hatespeech/dev.spacy
      - corpus/textcat-hatespeech/test.spacy
      - corpus/textcat-hatespeech/pretraining.jsonl
      - corpus/textcat_multilabel-dengue/train.spacy
      - corpus/textcat_multilabel-dengue/dev.spacy
      - corpus/textcat_multilabel-dengue/test.spacy
      - corpus/textcat_multilabel-dengue/pretraining.jsonl
      - corpus/ner-calamancy_gold/train.spacy
      - corpus/ner-calamancy_gold/dev.spacy
      - corpus/ner-calamancy_gold/test.spacy
      - corpus/parser-ud/train.spacy
      - corpus/parser-ud/dev.spacy
      - corpus/parser-ud/test.spacy

  - name: "pretrain-hatespeech"
    help: "Pretrain on Hatespeech training data to initialize vectors"
    script:
      - >-
        python -m spacy pretrain configs/textcat-hatespeech.cfg pretraining/hatespeech_md/
        --paths.raw_text corpus/textcat-hatespeech/pretraining.jsonl
        --pretraining.max_epochs 20
        --pretraining.n_save_every 5
        --paths.vectors tl_calamancy_md
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy pretrain configs/textcat-hatespeech.cfg pretraining/hatespeech_lg/
        --paths.raw_text corpus/textcat-hatespeech/pretraining.jsonl
        --pretraining.max_epochs 20
        --pretraining.n_save_every 5
        --paths.vectors tl_calamancy_lg
        --gpu-id ${vars.gpu_id}
    deps:
      - corpus/textcat-hatespeech/pretraining.jsonl
    outputs:
      - pretraining/hatespeech_md/model-last.bin
      - pretraining/hatespeech_lg/model-last.bin

  - name: "train-hatespeech"
    help: "Train binary textcat on Hatespeech dataset"
    script:
      - >-
        python -m spacy train
        configs/textcat-hatespeech.cfg
        --nlp.lang ${vars.lang}
        --output training/textcat-hatespeech-md/
        --paths.vectors tl_calamancy_md
        --paths.train corpus/textcat-hatespeech/train.spacy
        --paths.dev corpus/textcat-hatespeech/dev.spacy
        --initialize.init_tok2vec pretraining/hatespeech_md/model-last.bin
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy train
        configs/textcat-hatespeech.cfg
        --nlp.lang ${vars.lang}
        --output training/textcat-hatespeech-lg/
        --paths.vectors tl_calamancy_lg
        --paths.train corpus/textcat-hatespeech/train.spacy
        --paths.dev corpus/textcat-hatespeech/dev.spacy
        --initialize.init_tok2vec pretraining/hatespeech_lg/model-last.bin
        --gpu-id ${vars.gpu_id}
    deps:
      - corpus/textcat-hatespeech/train.spacy
      - corpus/textcat-hatespeech/dev.spacy
      - pretraining/hatespeech_md/model-last.bin
      - pretraining/hatespeech_lg/model-last.bin
    outputs:
      - training/textcat-hatespeech-md/model-best/
      - training/textcat-hatespeech-lg/model-best/

  - name: "train-hatespeech-trf"
    help: "Train binary textcat on Hatespeech dataset using transformers"
    script:
      - >-
        python -m spacy train
        configs/textcat-hatespeech-trf.cfg
        --nlp.lang ${vars.lang}
        --output training/textcat-hatespeech-trf/
        --paths.train corpus/textcat-hatespeech/train.spacy
        --paths.dev corpus/textcat-hatespeech/dev.spacy
        --gpu-id ${vars.gpu_id}
    deps:
      - corpus/textcat-hatespeech/train.spacy
      - corpus/textcat-hatespeech/dev.spacy
    outputs:
      - training/textcat-hatespeech-trf/model-best/

  - name: "evaluate-hatespeech"
    help: "Evaluate binary textcat on Hatespeech test data"
    script:
      - >-
        python -m spacy evaluate 
        training/textcat-hatespeech-md/model-best/ 
        corpus/textcat-hatespeech/test.spacy
        --output metrics/textcat-hatespeech-md-test.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        training/textcat-hatespeech-md/model-best/ 
        corpus/textcat-hatespeech/dev.spacy
        --output metrics/textcat-hatespeech-md-dev.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        training/textcat-hatespeech-lg/model-best/ 
        corpus/textcat-hatespeech/test.spacy
        --output metrics/textcat-hatespeech-lg-test.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        training/textcat-hatespeech-lg/model-best/ 
        corpus/textcat-hatespeech/dev.spacy
        --output metrics/textcat-hatespeech-lg-dev.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate
        training/textcat-hatespeech-trf/model-best/
        corpus/textcat-hatespeech/test.spacy
        --output metrics/textcat-hatespeech-trf-test.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate
        training/textcat-hatespeech-trf/model-best/
        corpus/textcat-hatespeech/dev.spacy
        --output metrics/textcat-hatespeech-trf-dev.json
        --gpu-id ${vars.gpu_id}
    deps:
      - training/textcat-hatespeech-md/model-best/
      - training/textcat-hatespeech-lg/model-best/
      - training/textcat-hatespeech-trf/model-best/
      - corpus/textcat-hatespeech/test.spacy
      - corpus/textcat-hatespeech/dev.spacy
    outputs:
      - metrics/textcat-hatespeech-md-test.json
      - metrics/textcat-hatespeech-md-dev.json
      - metrics/textcat-hatespeech-lg-test.json
      - metrics/textcat-hatespeech-lg-dev.json
      - metrics/textcat-hatespeech-trf-test.json
      - metrics/textcat-hatespeech-trf-dev.json

  - name: "pretrain-dengue"
    help: "Pretrain on Dengue training data to initialize vectors"
    script:
      - >-
        python -m spacy pretrain configs/textcat_multilabel-dengue.cfg pretraining/dengue_md/
        --paths.raw_text corpus/textcat_multilabel-dengue/pretraining.jsonl
        --pretraining.max_epochs 20
        --pretraining.n_save_every 5
        --paths.vectors tl_calamancy_md
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy pretrain configs/textcat_multilabel-dengue.cfg pretraining/dengue_lg/
        --paths.raw_text corpus/textcat_multilabel-dengue/pretraining.jsonl
        --pretraining.max_epochs 20
        --pretraining.n_save_every 5
        --paths.vectors tl_calamancy_lg
        --gpu-id ${vars.gpu_id}
    deps:
      - corpus/textcat_multilabel-dengue/pretraining.jsonl
    outputs:
      - pretraining/dengue_md/model-last.bin
      - pretraining/dengue_lg/model-last.bin

  - name: "train-dengue"
    help: "Train multilabel textcat on Dengue dataset"
    script:
      - >-
        python -m spacy train
        configs/textcat_multilabel-dengue.cfg
        --nlp.lang ${vars.lang}
        --output training/textcat_multilabel-dengue-md/
        --paths.vectors tl_calamancy_md
        --paths.train corpus/textcat_multilabel-dengue/train.spacy
        --paths.dev corpus/textcat_multilabel-dengue/dev.spacy
        --initialize.init_tok2vec pretraining/dengue_md/model-last.bin
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy train
        configs/textcat_multilabel-dengue.cfg
        --nlp.lang ${vars.lang}
        --output training/textcat_multilabel-dengue-lg/
        --paths.vectors tl_calamancy_lg
        --paths.train corpus/textcat_multilabel-dengue/train.spacy
        --paths.dev corpus/textcat_multilabel-dengue/dev.spacy
        --initialize.init_tok2vec pretraining/dengue_lg/model-last.bin
        --gpu-id ${vars.gpu_id}
    deps:
      - corpus/textcat_multilabel-dengue/train.spacy
      - corpus/textcat_multilabel-dengue/dev.spacy
      - pretraining/dengue_md/model-last.bin
      - pretraining/dengue_lg/model-last.bin
    outputs:
      - training/textcat_multilabel-dengue-md/model-best/
      - training/textcat_multilabel-dengue-lg/model-best/

  - name: "train-dengue-trf"
    help: "Train multilabel textcat on Dengue dataset using transformers"
    script:
      - >-
        python -m spacy train
        configs/textcat_multilabel-dengue-trf.cfg
        --nlp.lang ${vars.lang}
        --output training/textcat_multilabel-dengue-trf/
        --paths.train corpus/textcat_multilabel-dengue/train.spacy
        --paths.dev corpus/textcat_multilabel-dengue/dev.spacy
        --gpu-id ${vars.gpu_id}
    deps:
      - corpus/textcat_multilabel-dengue/train.spacy
      - corpus/textcat_multilabel-dengue/dev.spacy
    outputs:
      - training/textcat_multilabel-dengue-trf/model-best/

  - name: "evaluate-dengue"
    help: "Evaluate multilabel textcat on Dengue test data"
    script:
      - >-
        python -m spacy evaluate 
        training/textcat_multilabel-dengue-md/model-best/ 
        corpus/textcat_multilabel-dengue/test.spacy
        --output metrics/textcat_multilabel-dengue-md-test.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        training/textcat_multilabel-dengue-md/model-best/ 
        corpus/textcat_multilabel-dengue/dev.spacy
        --output metrics/textcat_multilabel-dengue-md-dev.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        training/textcat_multilabel-dengue-lg/model-best/ 
        corpus/textcat_multilabel-dengue/test.spacy
        --output metrics/textcat_multilabel-dengue-lg-test.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        training/textcat_multilabel-dengue-lg/model-best/ 
        corpus/textcat_multilabel-dengue/dev.spacy
        --output metrics/textcat_multilabel-dengue-lg-dev.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        training/textcat_multilabel-dengue-trf/model-best/ 
        corpus/textcat_multilabel-dengue/test.spacy
        --output metrics/textcat_multilabel-dengue-trf-test.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        training/textcat_multilabel-dengue-trf/model-best/ 
        corpus/textcat_multilabel-dengue/dev.spacy
        --output metrics/textcat_multilabel-dengue-trf-dev.json
        --gpu-id ${vars.gpu_id}
    deps:
      - training/textcat_multilabel-dengue-md/model-best/
      - training/textcat_multilabel-dengue-lg/model-best/
      - training/textcat_multilabel-dengue-trf/model-best/
      - corpus/textcat_multilabel-dengue/test.spacy
      - corpus/textcat_multilabel-dengue/dev.spacy
    outputs:
      - metrics/textcat_multilabel-dengue-md-test.json
      - metrics/textcat_multilabel-dengue-md-dev.json
      - metrics/textcat_multilabel-dengue-lg-test.json
      - metrics/textcat_multilabel-dengue-lg-dev.json
      - metrics/textcat_multilabel-dengue-trf-test.json
      - metrics/textcat_multilabel-dengue-trf-dev.json

  - name: "evaluate-calamancy"
    help: "Evaluate ner on calamanCy gold dev and test data"
    script:
      - >-
        python -m spacy evaluate 
        tl_calamancy_md
        corpus/ner-calamancy_gold/test.spacy
        --output metrics/ner-calamancy_gold-md-test.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        tl_calamancy_md
        corpus/ner-calamancy_gold/dev.spacy
        --output metrics/ner-calamancy_gold-md-dev.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        tl_calamancy_lg
        corpus/ner-calamancy_gold/test.spacy
        --output metrics/ner-calamancy_gold-lg-test.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        tl_calamancy_lg
        corpus/ner-calamancy_gold/dev.spacy
        --output metrics/ner-calamancy_gold-lg-dev.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        tl_calamancy_trf
        corpus/ner-calamancy_gold/test.spacy
        --output metrics/ner-calamancy_gold-trf-test.json
        --gpu-id ${vars.gpu_id}
      - >-
        python -m spacy evaluate 
        tl_calamancy_trf
        corpus/ner-calamancy_gold/dev.spacy
        --output metrics/ner-calamancy_gold-trf-dev.json
        --gpu-id ${vars.gpu_id}
    deps:
      - corpus/ner-calamancy_gold/dev.spacy
      - corpus/ner-calamancy_gold/test.spacy
    outputs:
      - metrics/ner-calamancy_gold-md-dev.json
      - metrics/ner-calamancy_gold-md-test.json
      - metrics/ner-calamancy_gold-lg-dev.json
      - metrics/ner-calamancy_gold-lg-test.json
      - metrics/ner-calamancy_gold-trf-dev.json
      - metrics/ner-calamancy_gold-trf-test.json

  - name: "evaluate-ud"
    help: "Evaluate parser and tagger on the combined Tagalog treebanks"
    script:
      - >-
        python -m scripts.kfold corpus/parser-ud/ configs/parser-ud.cfg
        --output metrics/parser-ud.json
        --seed ${vars.seed}
      - >-
        python -m scripts.kfold corpus/parser-ud/ configs/parser-ud-trf.cfg
        --output metrics/parser-ud-trf.json
        --seed ${vars.seed}
    deps:
      - corpus/parser-ud/
    outputs:
      - metrics/parser-ud.json
      - metrics/parser-ud-trf.json
